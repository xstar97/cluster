---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: lidarr
  namespace: lidarr
spec:
  interval: 15m
  chart:
    spec:
      chart: lidarr
      version: 26.2.3
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 20m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      stopAll: false
    credentials:
      cf-restic:
        type: s3
        url: "${CF_S3_RESTIC_URL}"
        bucket: "${CF_S3_RESTIC_BUCKET}-lidarr"
        accessKey: "${CF_S3_RESTIC_ID}"
        secretKey: "${CF_S3_RESTIC_KEY}"
        encrKey: "${CF_S3_RESTIC_KEY}"
    exportarrImage:
      repository: ghcr.io/thecfu/scraparr
      pullPolicy: IfNotPresent
      tag: 2.2.4@sha256:4aa7e22f7a632082dbfe6e4be694068b08e5764b83c95339220ff2b33bf43be2
    securityContext:
      readOnlyRootFilesystem: false
    service:
      metrics:
        enabled: "{{ .Values.metrics.main.enabled }}"
        type: ClusterIP
        ports:
          metrics:
            enabled: true
            port: 7100
    workload:
      main:
        podSpec:
          containers:
            main:
              env:
                LIDARR__SERVER__PORT: "{{ .Values.service.main.ports.main.port }}"
                LIDARR__AUTH__METHOD: External
                LIDARR__AUTH__REQUIRED: DisabledForLocalAddresses
                LIDARR__APP__THEME: dark
            exportarr:
              enabled: "{{ .Values.metrics.main.enabled }}"
              args: []
              probes:
                liveness:
                  enabled: true
                  type: http
                  path: /
                  port: "{{ .Values.service.metrics.ports.metrics.port }}"
                readiness:
                  enabled: true
                  type: http
                  path: /
                  port: "{{ .Values.service.metrics.ports.metrics.port }}"
                startup:
                  enabled: true
                  type: http
                  path: /
                  port: "{{ .Values.service.metrics.ports.metrics.port }}"
              env:
                LIDARR_URL: '{{ printf "http://%v:%v" (include "tc.v1.common.lib.chart.names.fullname" $) .Values.service.main.ports.main.port }}'
                LIDARR_API_KEY: "${LIDARR_KEY}"
    ingress:
      main:
        enabled: true
        ingressClassName: "internal"
        hosts:
          - host: lidarr.${DOMAIN_2}
            paths:
              - path: /
                pathType: Prefix
        integrations:
          nginx:
            enabled: true
            auth:
              type: "authelia"
              internalHost: "authelia.authelia.svc.cluster.local:9091"
              externalHost: "auth.${DOMAIN_2}"
          homepage:
            enabled: true
            group: "Media Manager"
            widget:
              custom:
                key: "${LIDARR_KEY}"
          certManager:
            enabled: true
            certificateIssuer: general-le-prod
    configmap:
      gatus:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: {{ .Release.Namespace }}
                group: media
                url: '{{ printf "%s://%s.%s.svc.cluster.local:%v" "http" .Release.Name .Release.Namespace .Values.service.main.ports.main.port }}'
                interval: 1m
                ui:
                  hide-url: true
                  hide-hostname: true
                conditions:
                  - "[CONNECTED] == true"
                alerts:
                  - type: discord
                    description: "healthcheck failed"
                    send-on-resolved: true
    persistence:
      config:
        volsync:
          - name: config
            type: restic
            credentials: cf-restic
            dest:
              enabled: true
            src:
              enabled: true
      media:
        enabled: true
        type: nfs
        server: ${SCALE_IP}
        path: ${MEDIA_NFS}
        mountPath: "${MEDIA_LOCAL}"
      downloads:
        enabled: true
        type: nfs
        server: ${SCALE_IP}
        path: ${DOWNLOADS_NFS}
        mountPath: "${DOWNLOADS_LOCAL}"
