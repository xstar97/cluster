---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: minecraft-router
  namespace: minecraft-router
spec:
  interval: 15m
  chart:
    spec:
      chart: minecraft-router
      version: 2.8.0
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 20m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      stopAll: false
    credentials:
      cf-restic:
        type: s3
        url: "${CF_S3_RESTIC_URL}"
        bucket: "${CF_S3_RESTIC_BUCKET}-minecraft-router"
        accessKey: "${CF_S3_RESTIC_ID}"
        secretKey: "${CF_S3_RESTIC_KEY}"
        encrKey: "${CF_S3_RESTIC_KEY}"
    service:
      main:
        enabled: true
        type: LoadBalancer
        loadBalancerIP: ${MC_ROUTER_IP}
        integrations:
          metallb:
            enabled: true
      api:
        enabled: true
        type: LoadBalancer
        loadBalancerIP: ${MC_ROUTER_IP}
        integrations:
          metallb:
            enabled: true
        ports:
          api:
            enabled: true
            port: 25564
    mcrouter:
      # vanilla:25565
      default: "" # "minecraft-lobby-minecraft-java.minecraft-lobby.svc.cluster.local:25565"
      mappings: []
        # - vanilla:25565
        # - forge:25565
        
    workload:
      main:
        podSpec:
          containers:
            main:
              probes:
                liveness:
                  port: "{{ .Values.service.api.ports.api.port }}"
                  path: /routes
                  httpHeaders:
                    Accept: application/json
                readiness:
                  port: "{{ .Values.service.api.ports.api.port }}"
                  path: /routes
                  httpHeaders:
                    Accept: application/json
                startup:
                  port: "{{ .Values.service.api.ports.api.port }}"
                  path: /routes
                  httpHeaders:
                    Accept: application/json
              env:
                API_BINDING: ":{{ .Values.service.api.ports.api.port }}"
                PORT: "{{ .Values.service.main.ports.main.port }}"
                IN_KUBE_CLUSTER: true
                # AUTO_SCALE_UP: true
                # AUTO_SCALE_DOWN: true
                # AUTO_SCALE_DOWN_AFTER: 6h
                # discard,expvar,influxdb,prometheus
                METRICS_BACKEND: prometheus
                RECORD_LOGINS: true
                # METRICS_BACKEND_CONFIG_INFLUXDB_ADDR
                # METRICS_BACKEND_CONFIG_INFLUXDB_DATABASE
                # METRICS_BACKEND_CONFIG_INFLUXDB_INTERVAL
                # METRICS_BACKEND_CONFIG_INFLUXDB_PASSWORD
                # METRICS_BACKEND_CONFIG_INFLUXDB_RETENTION_POLICY
                # METRICS_BACKEND_CONFIG_INFLUXDB_TAGS
                # METRICS_BACKEND_CONFIG_INFLUXDB_USERNAME
                DEFAULT: "{{ .Values.mcrouter.default }}"
                MAPPING: '{{ join "," .Values.mcrouter.mappings }}'

    metrics:
      main:
        enabled: true
        type: "servicemonitor"
        endpoints:
          - port: api
            path: /metrics
        targetSelector: api
        prometheusRule:
          enabled: false