---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: guacamole
  namespace: guacamole
spec:
  interval: 15m
  chart:
    spec:
      chart: guacamole
      version: 16.7.0
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 5m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      stopAll: false
    guacamole:
      general:
        EXTENSION_PRIORITY: "openid"
      openid:
        OPENID_AUTHORIZATION_ENDPOINT: "https://auth.${DOMAIN_2}/api/oidc/authorization?state=1234abcedfdhf"
        OPENID_JWKS_ENDPOINT: "https://auth.${DOMAIN_2}/jwks.json"
        OPENID_ISSUER: "https://auth.${DOMAIN_2}"
        OPENID_CLIENT_ID: "guacamole"
        OPENID_REDIRECT_URI: "https://guacamole.${DOMAIN_2}"
        OPENID_USERNAME_CLAIM_TYPE: preferred_username
        OPENID_GROUPS_CLAIM_TYPE: groups
        OPENID_SCOPE: openid profile groups email
        OPENID_ALLOWED_CLOCK_SKEW: 30
        OPENID_MAX_TOKEN_VALIDITY: 300
        OPENID_MAX_NONCE_VALIDITY: 300
    ingress:
      main:
        enabled: true
        ingressClassName: internal
        hosts:
          - host: guacamole.${DOMAIN_2}
        integrations:
          certManager:
            enabled: true
            certificateIssuer: general-le-prod
    configmap:
      test:
        enabled: true
        data:
          test.txt: |
            
            {{- $fullname := include "tc.v1.common.lib.chart.names.fullname" $ -}}

            appURL: {{ toYaml .Values.chartContext.appUrl }}

            {{- $allUrls := $.Values.chartContext.internalUrls | default list -}}
            
            internalUrls: {{ toYaml $allUrls }}

            {{- $objectData := (mustDeepCopy $service) -}}
            {{- $namespace := (include "tc.v1.common.lib.metadata.namespace" (dict "rootCtx" $ "objectData" $service "caller" "Service")) -}}

            {{/* Init object name */}}
            {{- $objectName := $name -}}

            {{- $expandName := (include "tc.v1.common.lib.util.expandName" (dict
                            "rootCtx" $ "objectData" $objectData
                            "name" $name "caller" "Service"
                            "key" "service")) -}}

            {{- if eq $expandName "true" -}}
              {{/* Expand the name of the service if expandName resolves to true */}}
              {{- $objectName = $fullname -}}
            {{- end -}}

            {{- if and (eq $expandName "true") (not $objectData.primary) -}}
              {{/* If the service is not primary append its name to fullname */}}
              {{- $objectName = (printf "%s-%s" $fullname $name) -}}
            {{- end -}}

            {{- include "tc.v1.common.lib.util.metaListToDict" (dict "objectData" $objectData) -}}

            {{/* Perform validations */}}
            {{- include "tc.v1.common.lib.chart.names.validation" (dict "name" $objectName) -}}
            {{- include "tc.v1.common.lib.metadata.validation" (dict "objectData" $objectData "caller" "Service") -}}
            {{- include "tc.v1.common.lib.service.validation" (dict "rootCtx" $ "objectData" $objectData) -}}

            {{/* Set the name of the service */}}
            {{- $_ := set $objectData "name" $objectName -}}
            {{- $_ := set $objectData "shortName" $name -}}

            {{/* Now iterate over the ports in the service */}}
            {{- range $port := $service.ports -}}
              {{- $enabledP := (include "tc.v1.common.lib.util.enabled" (dict
                            "rootCtx" $ "objectData" $port
                            "name" $name "caller" "service"
                            "key" "port")) -}}
              {{- if ne $enabledP "true" -}}{{- continue -}}{{- end -}}
              {{- $internalUrl := (printf "%s.%s.svc.cluster.local:%s" $objectName $namespace $port.port) -}}
              {{/* Append URLS */}}
              {{- $allUrls = mustAppend $allUrls $internalUrl -}}
            {{- end -}}

            {{/* Call class to create the object */}}
            {{- include "tc.v1.common.class.service" (dict "rootCtx" $ "objectData" $objectData) -}}
              {{- end -}}

              {{/* Update internalUrls after the loop */}}
              {{- $_ := set $.Values.chartContext "internalUrls" $allUrls -}}
            {{- end -}}
            
            internalUrls: {{ toYaml $allUrls }}
      gatus:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: {{ .Release.Namespace }}
                group: tools
                url: '{{ printf "%s://%s.%s.svc.cluster.local:%v" .Values.service.main.ports.main.protocol .Release.Name .Release.Namespace .Values.service.main.ports.main.port }}'
                interval: 1m
                ui:
                  hide-url: true
                  hide-hostname: true
                conditions:
                  - "[CONNECTED] == true"
                alerts:
                  - type: discord
                    description: "healthcheck failed"
                    send-on-resolved: true
