---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: guacamole
  namespace: guacamole
spec:
  interval: 15m
  chart:
    spec:
      chart: guacamole
      version: 16.7.0
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 5m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      stopAll: false
    guacamole:
      general:
        EXTENSION_PRIORITY: "openid"
      openid:
        OPENID_AUTHORIZATION_ENDPOINT: "https://auth.${DOMAIN_2}/api/oidc/authorization?state=1234abcedfdhf"
        OPENID_JWKS_ENDPOINT: "https://auth.${DOMAIN_2}/jwks.json"
        OPENID_ISSUER: "https://auth.${DOMAIN_2}"
        OPENID_CLIENT_ID: "guacamole"
        OPENID_REDIRECT_URI: "https://guacamole.${DOMAIN_2}"
        OPENID_USERNAME_CLAIM_TYPE: preferred_username
        OPENID_GROUPS_CLAIM_TYPE: groups
        OPENID_SCOPE: openid profile groups email
        OPENID_ALLOWED_CLOCK_SKEW: 30
        OPENID_MAX_TOKEN_VALIDITY: 300
        OPENID_MAX_NONCE_VALIDITY: 300
    ingress:
      main:
        enabled: true
        ingressClassName: internal
        hosts:
          - host: guacamole.${DOMAIN_2}
        integrations:
          certManager:
            enabled: true
            certificateIssuer: general-le-prod
    configmap:
      test:
        enabled: true
        data:
          test.txt: |
            internalURL: '{{ printf "%s://%s.%s.svc.cluster.local:%v" .Values.service.main.ports.main.protocol (include "tc.v1.common.lib.chart.names.fullname" $) .Release.Namespace .Values.service.main.ports.main.port }}'

            
            # Collect all services and ports into a list
            {{- $allUrls := list -}}
            {{- range $name, $service := .Values.service -}}
              {{- $enabled := (include "tc.v1.common.lib.util.enabled" (dict
                              "rootCtx" $ "objectData" $service
                              "name" $name "caller" "Service"
                              "key" "service")) -}}
              {{- if eq $enabled "true" -}}
                {{- $namespace := (include "tc.v1.common.lib.metadata.namespace" (dict "rootCtx" $ "objectData" $service "caller" "Service")) -}}
                {{- $fullname := include "tc.v1.common.lib.chart.names.fullname" $ -}}
                {{- $objectName := $name -}}
                {{- $expandName := (include "tc.v1.common.lib.util.expandName" (dict "rootCtx" $ "objectData" $service "name" $name "caller" "Service" "key" "service")) -}}
                {{- if eq $expandName "true" -}}
                  {{- $objectName = $fullname -}}
                {{- end -}}
                {{- if and (eq $expandName "true") (not $service.primary) -}}
                  {{- $objectName = (printf "%s-%s" $fullname $name) -}}
                {{- end -}}

                {{- range $port := $service.ports -}}
                  {{- $enabledP := (include "tc.v1.common.lib.util.enabled" (dict
                                  "rootCtx" $ "objectData" $port
                                  "name" $name "caller" "service"
                                  "key" "port")) -}}
                  {{- if eq $enabledP "true" -}}
                    {{- $url := printf "%s://%s.%s.svc.cluster.local:%v" $port.protocol $objectName $namespace $port.port -}}
                    {{- $allUrls = mustAppend $allUrls $url -}}
                  {{- end -}}
                {{- end -}}
              {{- end -}}
            {{- end -}}

            # Dump as JSON array so itâ€™s easy to consume
            internalUrls: {{ $allUrls | toJson }}

            {{- $svcName := "guacd" -}}
            {{- $portName := "guacd" -}}
            singleURL: '{{ printf "%s://%s.%s.svc.cluster.local:%v" (default "http" (index .Values.service $svcName).ports.$portName.protocol) (printf "%s-%s" (include "tc.v1.common.lib.chart.names.fullname" $) $svcName) .Release.Namespace (index .Values.service $svcName).ports.$portName.port }}'

            
      gatus:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: {{ .Release.Namespace }}
                group: tools
                url: '{{ printf "%s://%s.%s.svc.cluster.local:%v" .Values.service.main.ports.main.protocol .Release.Name .Release.Namespace .Values.service.main.ports.main.port }}'
                interval: 1m
                ui:
                  hide-url: true
                  hide-hostname: true
                conditions:
                  - "[CONNECTED] == true"
                alerts:
                  - type: discord
                    description: "healthcheck failed"
                    send-on-resolved: true
