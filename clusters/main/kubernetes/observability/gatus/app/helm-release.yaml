---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: gatus
  namespace: gatus
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 15.13.7
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 20m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      stopAll: false
      skipEmptyWalArchiveCheck: true
    image:
      repository: ghcr.io/twin/gatus
      pullPolicy: IfNotPresent
      tag: v5.25.2@sha256:9ff09fe5eb5e96b7f2126dc95b375a87a7bc16380d5cb9d798af4e0ef36f0049
    configsImage:
      repository: ghcr.io/home-operations/k8s-sidecar
      pullPolicy: IfNotPresent
      tag: 1.30.10@sha256:dd3b1f0c4e6b4512b2deb50c58acf65fd0f0927120a59a95eec854d32a6c9ce3
    sidecarImage:
      repository: ghcr.io/home-operations/gatus-sidecar
      pullPolicy: IfNotPresent
      tag: 0.0.5@sha256:59c439d8d6fffcdd1e277618f461892f8a285ac4abd22f2ee73c534b9ef2e890
    credentials:
      cf-restic:
        type: s3
        url: "${CF_S3_RESTIC_URL}"
        bucket: "${CF_S3_RESTIC_BUCKET}-gatus"
        accessKey: "${CF_S3_RESTIC_ID}"
        secretKey: "${CF_S3_RESTIC_KEY}"
        encrKey: "${CF_S3_RESTIC_KEY}"
    securityContext:
      readOnlyRootFilesystem: false
    service:
      main:
        ports:
          main:
            port: 8080
    ingress:
      main:
        enabled: true
        ingressClassName: "external"
        annotations:
            gatus.home-operations.com/enabled: "false"
        hosts:
          - host: gatus.${DOMAIN_2}
            paths:
              - path: /
                pathType: Prefix
        integrations:
          nginx:
            enabled: true
          homepage:
            enabled: true
            description: "Automated service health dashboard"
            icon: "sh-gatus.svg"
            group: Monitoring
            widget:
              type: gatus
          certManager:
            enabled: true
            certificateIssuer: general-le-prod
    
    workload:
      main:
        podSpec:
          containers:
            main:
              imageSelector: image
              env:
                GATUS_CONFIG_PATH: "{{ .Values.persistence.config.mountPath }}"
            sidecar:
              enabled: true
              imageSelector: sidecarImage
              probes:
                liveness:
                  enabled: false
                readiness:
                  enabled: false
                startup:
                  enabled: false
              args:
              - --auto-ingress
              - --output=/config/config-eps.yaml
              # - --default-dns=tcp://blocky-dns.blocky.svc.cluster.local:53
            configs:
              enabled: true
              imageSelector: configsImage
              probes:
                liveness:
                  enabled: false
                readiness:
                  enabled: false
                startup:
                  enabled: false
              env:
                FOLDER: "/config"
                LABEL: gatus.io/enabled
                NAMESPACE: ALL
                RESOURCE: both
                UNIQUE_FILENAMES: true
                METHOD: WATCH
    gatus:
      endpoints:
        - name: seb-minipc
          group: external
          url: "https://10.0.0.102:9090"
          interval: 1m          
          client:
            insecure: true
            timeout: 30s
          conditions:
            - "[STATUS] == 200"
          alerts:
            - type: discord
              description: "healthcheck failed"
              send-on-resolved: true

    configmap:
      gatus-config:
        enabled: true
        data:
          config.yaml: |
            {{- if .Values.cnpg.main.enabled }}
            storage:
              type: postgres
              path: {{ (printf "%s?client_encoding=utf8" (.Values.cnpg.main.creds.std | trimAll "\"")) | quote }}
            {{- end }}
            alerting:
              discord:
                webhook-url: "${GATUS_DISCORD_WEBHOOK_GLOBAL}"
            skip-invalid-config-update: true
            metrics: true
            {{- $.Values.gatus | toYaml | nindent 2 }}

    persistence:
      config:
        enabled: true
        mountPath: /config
        targetSelectAll: true
        volsync:
          - name: config
            type: restic
            credentials: cf-restic
            dest:
              enabled: true
            src:
              enabled: true
      gatus-config:
        enabled: true
        type: configmap
        mountPath: /config/config.yaml
        objectName: gatus-config
        readOnly: true
        subPath: config.yaml

    cnpg:
      main:
        enabled: true
        user: gatus
        database: gatus
        # mode: recovery
        cluster:
          singleNode: true
        backups:
          enabled: true
          credentials: cf-restic
          retentionPolicy: "7d"
          scheduledBackups:
            - name: daily-backup
              schedule: "0 5 0 * * *"
              backupOwnerReference: self
              immediate: true
              suspend: false
        recovery:
          method: object_store
          credentials: cf-restic

    addons:
      codeserver:
        enabled: true
        service:
          type: "ClusterIP"
          ports:
            codeserver:
              port: 36107
        ingress:
          enabled: true
          ingressClassName: "internal"
          annotations:
            gatus.home-operations.com/enabled: "false"
          hosts:
            - host: editor.gatus.${DOMAIN_2}
              paths:
                - path: /
                  pathType: Prefix
          integrations:
            nginx:
              enabled: true
            certManager:
              enabled: true
              certificateIssuer: general-le-prod

    # -- Whether Role Based Access Control objects like roles and rolebindings should be created
    rbac:
      main:
        enabled: true
        primary: true
        clusterWide: true
        rules:
          - apiGroups:
              - "networking.k8s.io"
            resources:
              - "ingresses"
            verbs:
              - "get"
              - "list"
              - "watch"
          - apiGroups: [""]
            resources:
              - "configmaps"
              - "secrets"
              - "services"
            verbs:
              - "get"
              - "list"
              - "watch"
    # -- The service account the pods will use to interact with the Kubernetes API
    serviceAccount:
      main:
        enabled: true
        primary: true

    podOptions:
      automountServiceAccountToken: true

    metrics:
      main:
        enabled: true
        type: "servicemonitor"
        endpoints:
          - port: main
            path: /metrics
